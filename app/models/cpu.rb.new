class Cpu < ActiveRecord::Base
  self.pluralize_table_names = false

  def self.chart_data(options = {})
    p options
    charts = []
    charts << self.cpu_chart(options)
    return charts
  end

  def self.cpu_chart(options)
    p options
    cpu_utilization = {
               :value_axes => [
	                  { 
			    :name => "valueAxis1",
			    :title => 'Cpu utilization in %',
			    :position => 'left',
			    :stack_type => '100%',
			    :min_max_multiplier => 1,
                            :include_guides_in_min_max => 'true',
			    :grid_alpha => 0.1
			  }
			],
               :graph_data => [],
	       :graphs => [],
	       :title => "Host CPU usage",
	       :title_size => 20
	     }

    prev = nil
    #CHOOSE HERE which
    # TODO ADD ALL TYPES
    graphs = ['system','nice','user','idle']
    self.cpu_aggregate(options).group_by{|u| u['cpu_id']}.each_pair do |cpu, values|
      prev = nil
      values.each do |data|
        if prev.nil? then
          prev = data
          next
        end
	temp = {"year" => data['max(timestamp)'].to_i * 1000}
	graphs.each {|g| temp[g] = data[g] - prev[g]}
        cpu_utilization[:graph_data] << temp
        prev = data
      end
    end

    graphs.each do |graph|
      #TODO value_axis
      cpu_utilization[:graphs] << { :value_axis => 'valueAxis1', :value_field => graph, :balloon_text => "[[title]]: ([[percents]]%)", :line_thickness => 1, :line_alpha => 1, :fill_alphas => 0.8, :graph_type => 'line' }
    end
    cpu_utilization
  end

  def self.cpu_detailed(options)
    ActiveRecord::Base.connection.select_all(
      ActiveRecord::Base.send(:sanitize_sql_array, 
        ["SELECT *,max(user), max(nice), max(system), max(idle), max(iowait), max(irq), max(softirq),
	    FROM_UNIXTIME((UNIX_TIMESTAMP(timestamp) div :period) * :period,'%Y-%m-%d %H:%i:%S') as period_start, max(timestamp) 
	  FROM cpu
          WHERE timestamp >= :timestamp AND hostname = :hostname
            AND ip_address = :ip_address  
          GROUP BY UNIX_TIMESTAMP(timestamp) div :period, cpu_id",
      :period => 300,:timestamp => options[:start].localtime, :hostname => options[:hostname], :ip_address => options[:ip_address] ]
	 )
    )
  end

  def self.cpu_aggregate(options)
    ActiveRecord::Base.connection.select_all(
      ActiveRecord::Base.send(:sanitize_sql_array, 
        ["SELECT *,max(user), max(nice), max(system), max(idle), max(iowait), max(irq), max(softirq),
	    FROM_UNIXTIME((UNIX_TIMESTAMP(timestamp) div :period) * :period,'%Y-%m-%d %H:%i:%S') as period_start, max(timestamp) 
	  FROM cpu
          WHERE timestamp >= :timestamp AND hostname = :hostname
            AND ip_address = :ip_address AND cpu_id = \'cpu\'
          GROUP BY UNIX_TIMESTAMP(timestamp) div :period, cpu_id",
      :period => 36000,:timestamp => options[:start].localtime, :hostname => options[:hostname], :ip_address => options[:ip_address] ]
	 )
    )
  end

  def self.graphs_defaults
   []
  end

  def self.axes_defaults
    []
  end
end
